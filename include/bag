/* vim: set filetype=cpp: */
#ifndef TREGANA_BAG
#define TREGANA_BAG
#include <list>
#include <memory>
#include <atomic>
namespace tregana {

struct bag_context
{
  size_t size{0};
  std::exception exception;
};
template<typename T>
struct bag
{
  bag();
  auto insert(bag_context&, const T&) noexcept -> bag<T>&;
  auto insert(bag_context&, T&&) noexcept -> bag<T>&;
  auto insert(bag_context&, std::unique_ptr<T>) noexcept -> bag<T>&;
  auto remove(bag_context&, const T&) noexcept -> bag<T>&;
  auto consume(bag_context&, size_t = 0) -> std::unique_ptr<T>;
  auto size() const noexcept -> size_t;
  auto contains(const T&) const noexcept -> std::pair<size_t, size_t>;
  auto operator+=(bag<T>&&t) noexcept -> bag<T>&;
  auto operator-=(const bag<T>&) noexcept -> std::pair<bag_context,bag<T>&>;
private:
  std::atomic<size_t> size_;
  std::list<std::unique_ptr<T>> dll_;
};

template<typename T>
bag<T>::bag()
: size_{0}
, dll_{}
{
}
template<typename T>
size_t bag<T>::size() const noexcept
{
  return size_.load();
}
template<typename T>
bag<T>& bag<T>::insert(bag_context&ctxt, const T& t) noexcept
{
  try
  {
    dll_.emplace_back(new T{t});
    ctxt.size = size_.load();
    ++size_;
  }
  catch(const std::bad_alloc& e)
  {
    ctxt.exception = e;
  }
  return *this;
}
template<typename T>
bag<T>& bag<T>::insert(bag_context&ctxt, T&& t) noexcept
{
  try
  {
    dll_.emplace_back(new T{t});
    ctxt.size = size_.load();
    ++size_;
  }
  catch (const std::bad_alloc& e)
  {
    ctxt.exception = e;
  }
  return *this;
}
template<typename T>
bag<T>& bag<T>::insert(bag_context&ctxt, std::unique_ptr<T> t) noexcept
{
  dll_.push_back(t);
  ctxt.size = size_.load();
  ++size_;
  return *this;
}
template<typename T>
std::pair<size_t, size_t> bag<T>::contains(const T&t) const noexcept
{
  std::pair<size_t, size_t> rval{0, size()};
  for (auto it{dll_.begin()}; it != dll_.end(); ++rval.first, ++it)
  {
    if (t.size() == (*it)->size() and std::equal((*it)->begin(), (*it)->end(), t.begin()))
    {
      break;
    }
  }
  return rval;
}
template<typename T>
bag<T>& bag<T>::remove(bag_context&ctxt, const T&t) noexcept
{
  auto pos{contains(t)};
  if (pos.first < pos.second)
  {
    ctxt.size = size_.load();
    do
    {
      auto it{dll_.begin()};
      std::advance(it, pos.first);
      --size_;
      dll_.erase(it);
      pos = contains(t);
    }
    while (pos.first < pos.second);
  }
  return *this;
}
template<typename T>
std::unique_ptr<T> bag<T>::consume(bag_context&ctxt, size_t i)
{
  if (not (i or dll_.empty()))
  {
    ctxt.size = size_;
    --size_;
    auto rval{std::move(dll_.front())};
    dll_.pop_front();
    return rval;
  }
  else if (i < dll_.size())
  {
    auto it{dll_.begin()};
    std::advance(it, i);
    ctxt.size = size_;
    --size_;
    auto rval{std::move(*it)};
    dll_.erase(it);
    return rval;

  }
  return nullptr;
}
template<typename T>
bag<T>& bag<T>::operator+=(bag<T>&&t) noexcept
{
  dll_.splice(dll_.end(), t.dll_);
  size_.fetch_add(t.size_.load());
  t.size_ = 0;
  return *this;
}
template<typename T>
std::pair<bag_context, bag<T>&> bag<T>::operator-=(const bag<T>&b) noexcept
{
  bag_context c;
  for (auto it{b.dll_.begin()}; it != b.dll_.end(); ++it)
    remove(c, **it);
  return {c, *this};
}
template<typename T>
bag<T>&& operator+(bag<T>&&a, bag<T>&&b)
{
  a += std::move(b);
  return std::move(a);
}
}//namespace tregana
#endif//TREGANA_BAG
